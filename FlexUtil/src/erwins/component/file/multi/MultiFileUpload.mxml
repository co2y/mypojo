<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:com="*"
	layout="vertical" width="100%" minWidth="400" height="100%" minHeight="300"
	title="파일업로드" creationComplete="init()" buttonMode="true" useHandCursor="true" showCloseButton="true" close="remove()"
	creationCompleteEffect="{EventEffect.iris}"
    removedEffect="{EventEffect.iris}" >
	
<mx:Metadata>
	[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
	[Event(name="uploadCancel", type="flash.events.Event")]
</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import erwins.util.effect.EventEffect;
			import erwins.util.json.Jsons;
			import mx.core.Application;

import mx.controls.*;
import mx.managers.*;
import mx.events.*;
import flash.events.*;
import flash.net.*;

private var _strUploadUrl:String;
private var _refAddFiles:FileReferenceList;	
private var _refUploadFile:FileReference;
private var _arrUploadFiles:Array;
private var _numCurrentUpload:Number = 0;

protected var successCallback:Function;
protected var failCallback:Function;
protected var args:Object;
protected var filterList:Array;

//private var me:MultiFileUpload = this as MultiFileUpload;

/* ===========================   생성 메소드 ==========================  */
/** 이 다건업로더는 한번에 하나씩 파일 수만큼 request를 던진다. */
public function pop(base:UIComponent,uploadUrl:String,modal:Boolean=false):void{
	this.uploadUrl = uploadUrl;
	PopUpManager.addPopUp(this,base,modal);
	PopUpManager.centerPopUp( this );
}

public function query(args:Object):MultiFileUpload{
	this.args = args;
	return this;
}
public function success(successCallback:Function):MultiFileUpload{
	this.successCallback = successCallback;
	return this;
}
public function fail(failCallback:Function):MultiFileUpload{
	this.failCallback = failCallback;
	return this;
}
/** 필터는 대소문자를 구분하지 않는다. */
public function addFilter(filter:FileFilter):MultiFileUpload{
	if(filterList==null) filterList  = new Array();
	filterList.push(filter);
	return this;
}

/* ===========================  내부 메소드 ==========================  */
			
private function remove():void{
	PopUpManager.removePopUp( this );
}
			
// Set uploadUrl
public function set uploadUrl(strUploadUrl:String):void {
	_strUploadUrl = strUploadUrl;
}
			
private function init():void {
	_arrUploadFiles = new Array();				
	enableUI();
	uploadCheck();
}
			
private function addFiles():void {
	_refAddFiles = new FileReferenceList();
	_refAddFiles.addEventListener(Event.SELECT, onSelectFile);
	_refAddFiles.browse(this.filterList);
}

private function onSelectFile(event:Event):void {
	var arrFoundList:Array = new Array();
	// Get list of files from fileList, make list of files already on upload list
	for (var i:Number = 0; i < _arrUploadFiles.length; i++) {
		for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
			if (_arrUploadFiles[i].name == _refAddFiles.fileList[j].name) {
				arrFoundList.push(_refAddFiles.fileList[j].name);
				_refAddFiles.fileList.splice(j, 1);
				j--;
			}
		}
	}
	if (_refAddFiles.fileList.length >= 1) {				
		for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
			_arrUploadFiles.push({
				name:_refAddFiles.fileList[k].name,
				size:formatFileSize(_refAddFiles.fileList[k].size),
				file:_refAddFiles.fileList[k]});
		}
		listFiles.dataProvider = _arrUploadFiles;
		listFiles.selectedIndex = _arrUploadFiles.length - 1;
	}				
	if (arrFoundList.length >= 1) {
		Alert.show("The file(s): \n\n• " + arrFoundList.join("\n• ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
	}
	updateProgBar();
	scrollFiles();
	uploadCheck();
}
			
/** 1024로 바꾸자. */
private function formatFileSize(numSize:Number):String {
	var strReturn:String;
	numSize = Number(numSize / 1000);
	strReturn = String(numSize.toFixed(1) + " KB");
	if (numSize > 1000) {
		numSize = numSize / 1000;
		strReturn = String(numSize.toFixed(1) + " MB");
		if (numSize > 1000) {
			numSize = numSize / 1000;
			strReturn = String(numSize.toFixed(1) + " GB");
		}
	}
	return strReturn;
}

// Called to remove selected file(s) for upload
private function removeFiles():void {
	var arrSelected:Array = listFiles.selectedIndices;
	if (arrSelected.length >= 1) {
		for (var i:Number = 0; i < arrSelected.length; i++) {
			_arrUploadFiles[Number(arrSelected[i])] = null;
		}
		for (var j:Number = 0; j < _arrUploadFiles.length; j++) {
			if (_arrUploadFiles[j] == null) {
				_arrUploadFiles.splice(j, 1);
				j--;
			}
		}
		listFiles.dataProvider = _arrUploadFiles;
		listFiles.selectedIndex = 0;					
	}
	updateProgBar();
	scrollFiles();
	uploadCheck();
}
			
/** 최소한 1개의 파일이 존재하는지? */
private function uploadCheck():void {
	if (_arrUploadFiles.length == 0) {
		btnUpload.enabled = false;
		listFiles.verticalScrollPolicy = "off";
	} else {
		btnUpload.enabled = true;
		listFiles.verticalScrollPolicy = "on";
	}
}
			
private function disableUI():void {
	btnAdd.enabled = false;
	btnRemove.enabled = false;
	btnUpload.enabled = false;
	btnCancel.enabled = true;
	listFiles.enabled = false;
	listFiles.verticalScrollPolicy = "off";
}			
private function enableUI():void {
	btnAdd.enabled = true;
	btnRemove.enabled = true;
	btnUpload.enabled = true;
	btnCancel.enabled = false;
	listFiles.enabled = true;
	listFiles.verticalScrollPolicy = "on";
}
			
// Scroll listFiles to selected row
private function scrollFiles():void {
	listFiles.verticalScrollPosition = listFiles.selectedIndex;
	listFiles.validateNow();
}

// Called to upload file based on current upload number
private function startUpload():void {
	if (_arrUploadFiles.length > 0) {
		disableUI();
		
		listFiles.selectedIndex = _numCurrentUpload;
		scrollFiles();
		
		// Variables to send along with upload => 사용하지 않는다.
		//var sendVars:URLVariables = new URLVariables();
		//sendVars.action = "upload";
		
		var request:URLRequest = new URLRequest();
		//request.data = sendVars;
		request.data = Jsons.serialize(args);
	    request.url = _strUploadUrl;
	    request.method = URLRequestMethod.POST;
	    _refUploadFile = new FileReference();
	    _refUploadFile = listFiles.selectedItem.file;
	    _refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
	   	_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
	  	
	  	try{
			_refUploadFile.upload(request, "file", false);
	    }catch(e:SecurityError){
			if(failCallback==null) Alert.show(e.toString());
			else failCallback(e);
	    }catch(e:Error){
	    	Alert.show(e.toString());
	    }
	}
}

// Cancel and clear eventlisteners on last upload
private function clearUpload():void {
	_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
	_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
	_refUploadFile.cancel();
	_numCurrentUpload = 0;
	updateProgBar();
	enableUI();
}
			
// Called on upload cancel
private function onUploadCanceled():void {
	clearUpload();
	dispatchEvent(new Event("uploadCancel"));
}
			
// Get upload progress
private function onUploadProgress(event:ProgressEvent):void {
	var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
	updateProgBar(numPerc);
	var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
	dispatchEvent(evt);
}
			
// Update progBar
private function updateProgBar(numPerc:Number = 0):void {
	var strLabel:String = (_numCurrentUpload + 1) + "/" + _arrUploadFiles.length;
	strLabel = (_numCurrentUpload + 1 <= _arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
	strLabel = (_numCurrentUpload + 1 == _arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
	strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
	progBar.label = strLabel;
	progBar.setProgress(numPerc, 100);
	progBar.validateNow();
}
			
private function onUploadComplete(event:Event):void {
	_numCurrentUpload++;				
	if (_numCurrentUpload < _arrUploadFiles.length) {
		startUpload();
	} else {
		enableUI();
		clearUpload();
		if(successCallback!=null) successCallback();
		this.title = "File(s) have been uploaded.";
		var timer:Timer = new Timer( 2000, 1 );
	    timer.addEventListener(TimerEvent.TIMER,function(event:TimerEvent):void{
	    	timer.stop();
			remove();	
	    });
	    timer.start(); // 타이머 시작
	}
}
			
// Change view state
private function changeView():void {
	currentState = (currentState == "mini") ? "" : "mini";
}
			
]]></mx:Script>
	
	<mx:states>
		<mx:State name="mini">
			<mx:SetProperty name="height" value="60"/>
			<mx:SetProperty name="minHeight" value="60"/>
			<mx:SetStyle target="{btnView}" name="icon" value="@Embed('assets/application_put.png')"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{this}" duration="1000"/>
		</mx:Transition>
	</mx:transitions>
	
	<mx:Canvas width="100%" height="100%">
		<mx:DataGrid id="listFiles" left="0" top="0" bottom="0" right="0"
			allowMultipleSelection="true" verticalScrollPolicy="on"
			draggableColumns="false" resizableColumns="false" sortableColumns="false">
			<mx:columns>
				<mx:DataGridColumn headerText="File" dataField="name" wordWrap="true"/>
				<mx:DataGridColumn headerText="Size" dataField="size" width="75" textAlign="right"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:ControlBar horizontalAlign="center" verticalAlign="middle">
		<mx:Button id="btnAdd" toolTip="Add file(s)" click="addFiles()" icon="@Embed('assets/add.png')" width="26"/>
		<mx:Button id="btnRemove" toolTip="Remove file(s)" click="removeFiles()" icon="@Embed('assets/delete.png')" width="26"/>
		<mx:ProgressBar id="progBar" mode="manual" label="" labelPlacement="center" width="100%"/>
		<mx:Button id="btnCancel" toolTip="Cancel upload" icon="@Embed('assets/cancel2.png')" width="26" click="onUploadCanceled()"/>
		<mx:Button label="Upload" toolTip="Upload file(s)" id="btnUpload" click="startUpload()" icon="@Embed('assets/bullet_go.png')"/>
		<mx:Button id="btnView" toolTip="Show/Hide file(s)" icon="@Embed('assets/application_get.png')" width="26" click="changeView()"/>
	</mx:ControlBar>	
</mx:TitleWindow>